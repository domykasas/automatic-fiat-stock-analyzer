name: Build and Release Binaries

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

permissions:
  contents: write

jobs:
  build:
    name: Build binaries (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clean previous builds (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue dist, build, __pycache__, *.spec
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue .pytest_cache, .coverage, htmlcov

      - name: Clean previous builds (Linux/macOS)
        if: ${{ runner.os != 'Windows' }}
        run: |
          rm -rf dist build __pycache__ *.spec
          rm -rf .pytest_cache .coverage htmlcov

      - name: Set version variable
        uses: actions/github-script@v7
        with:
          script: |
            const ref = process.env.GITHUB_REF || '';
            const refName = process.env.GITHUB_REF_NAME || '';
            let version = '1.0.3'; // Default version for main branch
            if (ref.startsWith('refs/tags/v')) {
              version = refName.replace(/^v/, '');
            }
            core.exportVariable('VERSION', version);
            core.info(`VERSION=${version}`);

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set environment variables
        run: |
          echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV
          echo "PYTHONUNBUFFERED=1" >> $GITHUB_ENV

      - name: Upgrade pip
        run: |
          python -m pip install -U pip wheel setuptools

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pyinstaller[hook-cryptography]
          pip install --upgrade pip wheel setuptools

      - name: Debug environment
        run: |
          echo "Python version: $(python --version)"
          echo "Pip version: $(pip --version)"
          echo "PyInstaller version: $(pyinstaller --version)"
          echo "Installed packages:"
          pip list

      - name: Verify spec file (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          echo "Checking spec file..."
          if (Test-Path "FiatTradeCalculator.spec") {
            echo "Spec file exists. Contents:"
            Get-Content FiatTradeCalculator.spec
          } else {
            echo "Spec file not found!"
            echo "Creating a basic spec file..."
            pyi-makespec --name FiatTradeCalculator --onefile calculator.py
            echo "Generated spec file contents:"
            Get-Content FiatTradeCalculator.spec
          }

      - name: Verify spec file (Linux/macOS)
        if: ${{ runner.os != 'Windows' }}
        run: |
          echo "Checking spec file..."
          if [ -f "FiatTradeCalculator.spec" ]; then
            echo "Spec file exists. Contents:"
            cat FiatTradeCalculator.spec
          else
            echo "Spec file not found!"
            echo "Creating a basic spec file..."
            pyi-makespec --name FiatTradeCalculator --onefile calculator.py
            echo "Generated spec file contents:"
            cat FiatTradeCalculator.spec
          fi

      - name: Build executable (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          echo "Current directory: $(Get-Location)"
          echo "Files in current directory:"
          Get-ChildItem
          echo "Checking if spec file exists:"
          if (Test-Path "FiatTradeCalculator.spec") {
            echo "Spec file found, using it..."
            pyinstaller FiatTradeCalculator.spec
            echo "Build completed. Checking output files:"
            Get-ChildItem dist/
          } else {
            echo "Spec file not found, using command-line approach..."
            pyinstaller --name "FiatTradeCalculator-${{ env.VERSION }}" --onefile --hidden-import yfinance --hidden-import curl_cffi --hidden-import requests --hidden-import pandas --hidden-import numpy --hidden-import scipy --hidden-import lxml --hidden-import bs4 --hidden-import html5lib --collect-all yfinance --collect-all curl_cffi calculator.py
          }

      - name: Build executable (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo "Checking if spec file exists:"
          if [ -f "FiatTradeCalculator.spec" ]; then
            echo "Spec file found, using it..."
            pyinstaller FiatTradeCalculator.spec
            echo "Build completed. Checking output files:"
            ls -la dist/
          else
            echo "Spec file not found, using command-line approach..."
            pyinstaller --name "FiatTradeCalculator-${{ env.VERSION }}" --onefile --hidden-import yfinance --hidden-import curl_cffi --hidden-import requests --hidden-import pandas --hidden-import numpy --hidden-import scipy --hidden-import lxml --hidden-import bs4 --hidden-import html5lib --collect-all yfinance --collect-all curl_cffi calculator.py
          fi

      - name: Build app bundle (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo "Checking if spec file exists:"
          if [ -f "FiatTradeCalculator.spec" ]; then
            echo "Spec file found, using it..."
            pyinstaller FiatTradeCalculator.spec
            echo "Build completed. Checking output files:"
            ls -la dist/
          else
            echo "Spec file not found, using command-line approach..."
            pyinstaller --name "FiatTradeCalculator-${{ env.VERSION }}" --windowed --hidden-import yfinance --hidden-import curl_cffi --hidden-import requests --hidden-import pandas --hidden-import numpy --hidden-import scipy --hidden-import lxml --hidden-import bs4 --hidden-import html5lib --collect-all yfinance --collect-all curl_cffi calculator.py
          fi

      - name: Test executable (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          echo "Testing executable..."
          echo "Checking if executable exists..."
          if (Test-Path "dist/FiatTradeCalculator-1.0.3.exe") {
            echo "Executable found, testing with timeout..."
            # Use Job with timeout to prevent infinite hanging
            $job = Start-Job -ScriptBlock { 
              param($exePath)
              & $exePath --help
            } -ArgumentList "dist/FiatTradeCalculator-1.0.3.exe"
            
            # Wait for job with timeout
            $timeout = 30
            $startTime = Get-Date
            do {
              if ($job.State -eq "Completed") {
                $result = Receive-Job -Job $job
                echo "Executable test completed successfully"
                echo "Output: $result"
                break
              }
              if ($job.State -eq "Failed") {
                echo "Executable test failed"
                $error = Receive-Job -Job $job -ErrorAction SilentlyContinue
                echo "Error: $error"
                break
              }
              Start-Sleep -Seconds 1
              $elapsed = (Get-Date) - $startTime
            } while ($elapsed.TotalSeconds -lt $timeout)
            
            if ($job.State -ne "Completed" -and $job.State -ne "Failed") {
              echo "Executable test timed out after $timeout seconds"
              Stop-Job -Job $job -ErrorAction SilentlyContinue
            }
            
            Remove-Job -Job $job -ErrorAction SilentlyContinue
          } else {
            echo "Executable not found at dist/FiatTradeCalculator-1.0.3.exe"
          }

      - name: Test executable (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          echo "Testing executable..."
          echo "Checking if executable exists..."
          if [ -f "dist/FiatTradeCalculator-1.0.3" ]; then
            echo "Executable found, testing with timeout..."
            # Use timeout to prevent infinite hanging
            timeout 30s "./dist/FiatTradeCalculator-1.0.3" --help || echo "Executable test completed"
          else
            echo "Executable not found at dist/FiatTradeCalculator-1.0.3"
          fi

      - name: Test app bundle (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          echo "Testing app bundle..."
          if [ -d "dist/FiatTradeCalculator-1.0.3.app" ]; then
            echo "App bundle found, testing with timeout..."
            timeout 30s "./dist/FiatTradeCalculator-1.0.3.app/Contents/MacOS/FiatTradeCalculator-1.0.3" --help || echo "App bundle test completed"
          else
            echo "App bundle not found at dist/FiatTradeCalculator-1.0.3.app"
          fi

      - name: Verify build artifacts (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          echo "Build artifacts:"
          Get-ChildItem dist/
          if (Test-Path "dist/FiatTradeCalculator-1.0.3.exe") {
            $size = (Get-Item "dist/FiatTradeCalculator-1.0.3.exe").Length
            echo "Windows executable size: $([math]::Round($size/1MB, 2)) MB"
          }

      - name: Verify build artifacts (Linux/macOS)
        if: ${{ runner.os != 'Windows' }}
        run: |
          echo "Build artifacts:"
          ls -la dist/
          if [ -f "dist/FiatTradeCalculator-1.0.3" ]; then
            echo "Executable size: $(du -h dist/FiatTradeCalculator-1.0.3)"
            echo "Executable type: $(file dist/FiatTradeCalculator-1.0.3)"
          fi
          if [ -f "dist/FiatTradeCalculator-1.0.3.exe" ]; then
            echo "Windows executable size: $(du -h dist/FiatTradeCalculator-1.0.3.exe)"
          fi
          if [ -d "dist/FiatTradeCalculator-1.0.3.app" ]; then
            echo "macOS app bundle size: $(du -sh dist/FiatTradeCalculator-1.0.3.app)"
          fi

      - name: Package artifact (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          echo "Checking for Linux executable..."
          echo "Contents of dist directory:"
          ls -la dist/
          echo "Looking for executable files..."
          find dist/ -type f -executable
          
          # Try to find the executable with versioned name first
          if [ -f "dist/FiatTradeCalculator-1.0.3" ]; then
            echo "Found versioned executable: dist/FiatTradeCalculator-1.0.3"
            mkdir -p dist_pkg
            cp "dist/FiatTradeCalculator-1.0.3" dist_pkg/
            tar -C dist_pkg -czf "FiatTradeCalculator-${{ env.VERSION }}-Linux-x64.tar.gz" .
          elif [ -f "dist/FiatTradeCalculator" ]; then
            echo "Found unversioned executable: dist/FiatTradeCalculator"
            mkdir -p dist_pkg
            cp "dist/FiatTradeCalculator" dist_pkg/
            tar -C dist_pkg -czf "FiatTradeCalculator-${{ env.VERSION }}-Linux-x64.tar.gz" .
          else
            echo "No executable found in dist directory!"
            echo "Available files:"
            ls -la dist/
            exit 1
          fi

      - name: Package artifacts (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          echo "Checking for Windows executable..."
          echo "Contents of dist directory:"
          Get-ChildItem dist/
          echo "Looking for executable files..."
          Get-ChildItem dist/ -Filter "*.exe"
          
          # Try to find the executable with versioned name first
          if (Test-Path "dist/FiatTradeCalculator-1.0.3.exe") {
            echo "Found versioned executable: dist/FiatTradeCalculator-1.0.3.exe"
            $exe = "FiatTradeCalculator-${{ env.VERSION }}-Windows-x64.exe"
            Copy-Item "dist/FiatTradeCalculator-1.0.3.exe" $exe
            Compress-Archive -Path "dist/FiatTradeCalculator-1.0.3.exe" -DestinationPath "FiatTradeCalculator-${{ env.VERSION }}-Windows-x64.zip"
          } elseif (Test-Path "dist/FiatTradeCalculator.exe") {
            echo "Found unversioned executable: dist/FiatTradeCalculator.exe"
            $exe = "FiatTradeCalculator-${{ env.VERSION }}-Windows-x64.exe"
            Copy-Item "dist/FiatTradeCalculator.exe" $exe
            Compress-Archive -Path "dist/FiatTradeCalculator.exe" -DestinationPath "FiatTradeCalculator-${{ env.VERSION }}-Windows-x64.zip"
          } else {
            echo "No executable found in dist directory!"
            echo "Available files:"
            Get-ChildItem dist/
            exit 1
          }

      - name: Package artifacts (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          echo "Checking for app bundle..."
          echo "Contents of dist directory:"
          ls -la dist/
          echo "Looking for app bundle..."
          find dist/ -name "*.app" -type d
          
          # Try to find the app bundle with versioned name first
          if [ -d "dist/FiatTradeCalculator-1.0.3.app" ]; then
            echo "Found versioned app bundle: dist/FiatTradeCalculator-1.0.3.app"
            ditto -c -k --sequesterRsrc --keepParent "dist/FiatTradeCalculator-1.0.3.app" "FiatTradeCalculator-${{ env.VERSION }}-macOS-x64.zip"
            hdiutil create -volname "FiatTradeCalculator" -srcfolder "dist/FiatTradeCalculator-1.0.3.app" -ov -format UDZO "FiatTradeCalculator-${{ env.VERSION }}-macOS-x64.dmg"
          elif [ -d "dist/FiatTradeCalculator.app" ]; then
            echo "Found unversioned app bundle: dist/FiatTradeCalculator.app"
            ditto -c -k --sequesterRsrc --keepParent "dist/FiatTradeCalculator.app" "FiatTradeCalculator-${{ env.VERSION }}-macOS-x64.zip"
            hdiutil create -volname "FiatTradeCalculator" -srcfolder "dist/FiatTradeCalculator.app" -ov -format UDZO "FiatTradeCalculator-${{ env.VERSION }}-macOS-x64.dmg"
          else
            echo "App bundle not found at expected location, checking for alternatives..."
            APP_PATH=$(find dist/ -name "*.app" -type d | head -1)
            if [ -n "$APP_PATH" ]; then
              echo "Found app bundle at: $APP_PATH"
              APP_NAME=$(basename "$APP_PATH")
              ditto -c -k --sequesterRsrc --keepParent "$APP_PATH" "FiatTradeCalculator-${{ env.VERSION }}-macOS-x64.zip"
              hdiutil create -volname "FiatTradeCalculator" -srcfolder "$APP_PATH" -ov -format UDZO "FiatTradeCalculator-${{ env.VERSION }}-macOS-x64.dmg"
            else
              echo "No app bundle found, creating fallback package..."
              # Fallback: create a simple zip of the dist directory
              zip -r "FiatTradeCalculator-${{ env.VERSION }}-macOS-x64.zip" dist/
            fi
          fi

      - name: Upload Linux artifact
        if: ${{ runner.os == 'Linux' }}
        uses: actions/upload-artifact@v4
        with:
          name: FiatTradeCalculator-${{ env.VERSION }}-Linux-x64
          path: FiatTradeCalculator-${{ env.VERSION }}-Linux-x64.tar.gz
          if-no-files-found: error

      - name: Upload Windows artifacts
        if: ${{ runner.os == 'Windows' }}
        uses: actions/upload-artifact@v4
        with:
          name: FiatTradeCalculator-${{ env.VERSION }}-Windows-x64
          path: |
            FiatTradeCalculator-${{ env.VERSION }}-Windows-x64.zip
            FiatTradeCalculator-${{ env.VERSION }}-Windows-x64.exe
          if-no-files-found: error

      - name: Upload macOS artifacts
        if: ${{ runner.os == 'macOS' }}
        uses: actions/upload-artifact@v4
        with:
          name: FiatTradeCalculator-${{ env.VERSION }}-macOS-x64
          path: |
            FiatTradeCalculator-${{ env.VERSION }}-macOS-x64.zip
            FiatTradeCalculator-${{ env.VERSION }}-macOS-x64.dmg
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display downloaded files
        run: |
          ls -R artifacts

      - name: Create Release (if tag)
        id: create_release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/FiatTradeCalculator-*-Linux-x64.tar.gz
            artifacts/**/FiatTradeCalculator-*-Windows-x64.zip
            artifacts/**/FiatTradeCalculator-*-Windows-x64.exe
            artifacts/**/FiatTradeCalculator-*-macOS-x64.zip
            artifacts/**/FiatTradeCalculator-*-macOS-x64.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets on main (latest)
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v1.0.3
          target_commitish: ${{ github.sha }}
          make_latest: true
          name: Release v1.0.3
          files: |
            artifacts/**/FiatTradeCalculator-*-Linux-x64.tar.gz
            artifacts/**/FiatTradeCalculator-*-Windows-x64.zip
            artifacts/**/FiatTradeCalculator-*-Windows-x64.exe
            artifacts/**/FiatTradeCalculator-*-macOS-x64.zip
            artifacts/**/FiatTradeCalculator-*-macOS-x64.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
