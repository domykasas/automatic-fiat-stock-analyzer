name: Build and Release Binaries

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

permissions:
  contents: write

jobs:
  build:
    name: Build binaries (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clean previous builds (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue dist, build, __pycache__, *.spec
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue .pytest_cache, .coverage, htmlcov

      - name: Clean previous builds (Linux/macOS)
        if: ${{ runner.os != 'Windows' }}
        run: |
          rm -rf dist build __pycache__ *.spec
          rm -rf .pytest_cache .coverage htmlcov

      - name: Set version variable
        uses: actions/github-script@v7
        with:
          script: |
            const ref = process.env.GITHUB_REF || '';
            const refName = process.env.GITHUB_REF_NAME || '';
            let version = 'latest';
            if (ref.startsWith('refs/tags/v')) {
              version = refName.replace(/^v/, '');
            }
            core.exportVariable('VERSION', version);
            core.info(`VERSION=${version}`);

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set environment variables
        run: |
          echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV
          echo "PYTHONUNBUFFERED=1" >> $GITHUB_ENV

      - name: Upgrade pip
        run: |
          python -m pip install -U pip wheel setuptools

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pyinstaller[hook-cryptography]
          pip install --upgrade pip wheel setuptools

      - name: Debug environment
        run: |
          echo "Python version: $(python --version)"
          echo "Pip version: $(pip --version)"
          echo "PyInstaller version: $(pyinstaller --version)"
          echo "Installed packages:"
          pip list

      - name: Build executable (Windows/Linux)
        if: ${{ runner.os != 'macOS' }}
        run: |
          pyinstaller FiatTradeCalculator.spec

      - name: Build app bundle (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          pyinstaller FiatTradeCalculator.spec

      - name: Test executable (Windows/Linux)
        if: ${{ runner.os != 'macOS' }}
        run: |
          echo "Testing executable..."
          ./dist/FiatTradeCalculator --help || echo "Executable built successfully"

      - name: Test app bundle (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          echo "Testing app bundle..."
          ./dist/FiatTradeCalculator.app/Contents/MacOS/FiatTradeCalculator --help || echo "App bundle built successfully"

      - name: Verify build artifacts (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          echo "Build artifacts:"
          Get-ChildItem dist/
          if (Test-Path "dist/FiatTradeCalculator.exe") {
            $size = (Get-Item "dist/FiatTradeCalculator.exe").Length
            echo "Windows executable size: $([math]::Round($size/1MB, 2)) MB"
          }

      - name: Verify build artifacts (Linux/macOS)
        if: ${{ runner.os != 'Windows' }}
        run: |
          echo "Build artifacts:"
          ls -la dist/
          if [ -f "dist/FiatTradeCalculator" ]; then
            echo "Executable size: $(du -h dist/FiatTradeCalculator)"
            echo "Executable type: $(file dist/FiatTradeCalculator)"
          fi
          if [ -f "dist/FiatTradeCalculator.exe" ]; then
            echo "Windows executable size: $(du -h dist/FiatTradeCalculator.exe)"
          fi
          if [ -d "dist/FiatTradeCalculator.app" ]; then
            echo "macOS app bundle size: $(du -sh dist/FiatTradeCalculator.app)"
          fi

      - name: Package artifact (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          mkdir -p dist_pkg
          cp dist/FiatTradeCalculator dist_pkg/
          tar -C dist_pkg -czf FiatTradeCalculator-${{ env.VERSION }}-Linux-x64.tar.gz .

      - name: Package artifacts (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          $exe = "FiatTradeCalculator-$Env:VERSION-Windows-x64.exe"
          Copy-Item dist/FiatTradeCalculator.exe $exe
          Compress-Archive -Path dist/FiatTradeCalculator.exe -DestinationPath "FiatTradeCalculator-$Env:VERSION-Windows-x64.zip"

      - name: Package artifacts (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          ditto -c -k --sequesterRsrc --keepParent dist/FiatTradeCalculator.app FiatTradeCalculator-${{ env.VERSION }}-macOS-x64.zip
          hdiutil create -volname "FiatTradeCalculator" -srcfolder "dist/FiatTradeCalculator.app" -ov -format UDZO FiatTradeCalculator-${{ env.VERSION }}-macOS-x64.dmg

      - name: Upload Linux artifact
        if: ${{ runner.os == 'Linux' }}
        uses: actions/upload-artifact@v4
        with:
          name: FiatTradeCalculator-${{ env.VERSION }}-Linux-x64
          path: FiatTradeCalculator-${{ env.VERSION }}-Linux-x64.tar.gz
          if-no-files-found: error

      - name: Upload Windows artifacts
        if: ${{ runner.os == 'Windows' }}
        uses: actions/upload-artifact@v4
        with:
          name: FiatTradeCalculator-${{ env.VERSION }}-Windows-x64
          path: |
            FiatTradeCalculator-${{ env.VERSION }}-Windows-x64.zip
            FiatTradeCalculator-${{ env.VERSION }}-Windows-x64.exe
          if-no-files-found: error

      - name: Upload macOS artifacts
        if: ${{ runner.os == 'macOS' }}
        uses: actions/upload-artifact@v4
        with:
          name: FiatTradeCalculator-${{ env.VERSION }}-macOS-x64
          path: |
            FiatTradeCalculator-${{ env.VERSION }}-macOS-x64.zip
            FiatTradeCalculator-${{ env.VERSION }}-macOS-x64.dmg
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display downloaded files
        run: |
          ls -R artifacts

      - name: Create Release (if tag)
        id: create_release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/FiatTradeCalculator-*-Linux-x64.tar.gz
            artifacts/**/FiatTradeCalculator-*-Windows-x64.zip
            artifacts/**/FiatTradeCalculator-*-Windows-x64.exe
            artifacts/**/FiatTradeCalculator-*-macOS-x64.zip
            artifacts/**/FiatTradeCalculator-*-macOS-x64.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets on main (latest)
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          target_commitish: ${{ github.sha }}
          make_latest: true
          name: Latest binaries
          files: |
            artifacts/**/FiatTradeCalculator-*-Linux-x64.tar.gz
            artifacts/**/FiatTradeCalculator-*-Windows-x64.zip
            artifacts/**/FiatTradeCalculator-*-Windows-x64.exe
            artifacts/**/FiatTradeCalculator-*-macOS-x64.zip
            artifacts/**/FiatTradeCalculator-*-macOS-x64.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
